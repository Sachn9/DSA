class Solution {
    public int[][] updateMatrix(int[][] mat) {

        int m=mat.length;
        int n=mat[0].length;
        int[][] dist = new int[m][n];
        LinkedList<int[]> queue=new LinkedList<>();

        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[0].length;j++){
                if(mat[i][j]==0){
                    dist[i][j] = 0;
                    queue.addLast(new int[]{i,j});
                }else{
                    dist[i][j]=-1;
                }
            }
        }

        int dir [][]={{0,-1},{0,1},{1,0},{-1,0}};
        while(queue.size()!=0){
            int [] pop=queue.removeFirst();

            int i=pop[0];
            int j=pop[1];

            if (i + 1 < m && dist[i + 1][j] == -1) {
                dist[i + 1][j] = dist[i][j] + 1;
                queue.add(new int[]{i + 1, j});
            }
            if (i - 1 >= 0 && dist[i - 1][j] == -1) {
                dist[i - 1][j] = dist[i][j] + 1;
                queue.add(new int[]{i - 1, j});
            }
            if (j + 1 < n && dist[i][j + 1] == -1) {
                dist[i][j + 1] = dist[i][j] + 1;
                queue.add(new int[]{i, j + 1});
            }
            if (j - 1 >= 0 && dist[i][j - 1] == -1) {
                dist[i][j - 1] = dist[i][j] + 1;
                queue.add(new int[]{i, j - 1});
            }
        }

        return dist;

        
    }
}
