class Solution {

    public boolean bfs(int[][] graph,Integer [] vis,int src){
        LinkedList<Integer> Q=new LinkedList<>();
        Q.addLast(src);
        int lcolor=0;

        while(Q.size() != 0){
            int size=Q.size();
            while(size-- != 0){
                int rem=Q.removeFirst();
                if(vis[rem] != null){
                    if(vis[rem] != lcolor){
                        return false;
                    }else{
                        continue;
                    }
                }else{
                    vis[rem]=lcolor;
                }
                int nbrs[]=graph[rem];
                for(int nbr : nbrs){
                    if(vis[nbr]==null){
                        Q.addLast(nbr);
                    }
                }
            }
            lcolor =lcolor==0?1 :0;
        }
        return true;

    }
    public boolean isBipartite(int[][] graph) {
        int totalVtx=graph.length;

        Integer [] vis=new Integer[totalVtx];
        for(int i=0;i<totalVtx;i++){
            if(vis[i]==null){
                boolean res=bfs(graph,vis,i);
                if(res==false){
                    return false;
                }
            }
        }
        return true;
    }
}
