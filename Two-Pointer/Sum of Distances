class Solution {
    public long[] distance(int[] nums) {
        int n = nums.length;
        long[] ans = new long[n];

        // left to right
        Map<Integer, Long> count = new HashMap<>();
        Map<Integer, Long> sum = new HashMap<>();

        for (int i = 0; i < n; i++) {
            int val = nums[i];
            if (count.containsKey(val)) {
                ans[i] += (count.get(val) * i - sum.get(val));
            }
            count.put(val, count.getOrDefault(val, 0L) + 1);
            sum.put(val, sum.getOrDefault(val, 0L) + i);
        }

        // right to left
        count.clear();
        sum.clear();

        for (int i = n - 1; i >= 0; i--) {
            int val = nums[i];
            if (count.containsKey(val)) {
                ans[i] += (sum.get(val) - count.get(val) * i);
            }
            count.put(val, count.getOrDefault(val, 0L) + 1);
            sum.put(val, sum.getOrDefault(val, 0L) + i);
        }

        return ans;
    }
}
